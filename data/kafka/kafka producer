KafkaProducer的重要方法:
1.
/**  
 * KafkaProducer构造方法除了初始化参数，另外还会启动KafkaThread线程，该线程执行Sender(implements Runnable),Sender为循环定时任务，当异常时会退出。
 */
private KafkaProducer(ProducerConfig config, Serializer<K> keySerializer, Serializer<V> valueSerializer)
NetworkClient client = new NetworkClient(
                    new Selector(config.getLong(ProducerConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG), this.metrics, time, "producer", channelBuilder),
                    this.metadata,
                    clientId,
                    config.getInt(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION),
                    config.getLong(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG),
                    config.getInt(ProducerConfig.SEND_BUFFER_CONFIG),
                    config.getInt(ProducerConfig.RECEIVE_BUFFER_CONFIG),
                    this.requestTimeoutMs, time);
            this.sender = new Sender(client,
                    this.metadata,
                    this.accumulator,
                    config.getInt(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION) == 1,
                    config.getInt(ProducerConfig.MAX_REQUEST_SIZE_CONFIG),
                    (short) parseAcks(config.getString(ProducerConfig.ACKS_CONFIG)),
                    config.getInt(ProducerConfig.RETRIES_CONFIG),
                    this.metrics,
                    new SystemTime(),
                    clientId,
                    this.requestTimeoutMs);
            String ioThreadName = "kafka-producer-network-thread" + (clientId.length() > 0 ? " | " + clientId : "");
            this.ioThread = new KafkaThread(ioThreadName, this.sender, true);
            this.ioThread.start();

2.
/**  
 * 此方法是上传数据的具体实现方法，该方法注释说明此方法为异步，方法中主要实现是将上传信息添加到accumulator中。
 */
/**
     * Implementation of asynchronously send a record to a topic. Equivalent to <code>send(record, null)</code>.
     * See {@link #send(ProducerRecord, Callback)} for details.
     */
    private Future<RecordMetadata> doSend(ProducerRecord<K, V> record, Callback callback)

RecordAccumulator.RecordAppendResult result = accumulator.append(tp, timestamp, serializedKey, serializedValue, interceptCallback, remainingWaitMs);



Sender的重要方法：
1.
/**
     * The main run loop for the sender thread
     */
    public void run()
        // main loop, runs until close is called
        while (running) {
            try {
                run(time.milliseconds());
            } catch (Exception e) {
                log.error("Uncaught error in kafka producer I/O thread: ", e);
            }
        }


2.
/**
 *  send方法将请求添加到KafkaChannel中并设置SocketChannel为SelectionKey.OP_WRITE
 *  poll方法负责向服务端发送请求
 */
void run(long now)
	for (ClientRequest request : requests)
            client.send(request, now);
	this.client.poll(pollTimeout, now);



NetworkClient的重要方法：
/**
 * 将请求添加到KafkaChannel中并设置SocketChannel为SelectionKey.OP_WRITE
 */
1.private void doSend(ClientRequest request, long now)
	selector.send(request.request());

2.
/**
 * 触发发送数据请求的方法
 */
/**
     * Do actual reads and writes to sockets.
     *
     * @param timeout The maximum amount of time to wait (in ms) for responses if there are none immediately,
     *                must be non-negative. The actual timeout will be the minimum of timeout, request timeout and
     *                metadata timeout
     * @param now The current time in milliseconds
     * @return The list of responses received
     */
     public List<ClientResponse> poll(long timeout, long now)
     try {
            this.selector.poll(Utils.min(timeout, metadataTimeout, requestTimeoutMs));
        } catch (IOException e) {
            log.error("Unexpected error during I/O", e);
        }



Selector的重要方法：（此Selector为Kafka自己实现的）
1.
/**
 * 将请求添加到KafkaChannel中并设置SocketChannel为SelectionKey.OP_WRITE
 */
public void send(Send send)
	channel.setSend(send);

2.
/**
 * 触发发送数据请求的方法
 */
private void pollSelectionKeys(Iterable<SelectionKey> selectionKeys, boolean isImmediatelyConnected)

	/* if channel is ready write to any sockets that have space in their buffer and for which we have data */
                if (channel.ready() && key.isWritable()) {
                    Send send = channel.write();
                    if (send != null) {
                        this.completedSends.add(send);
                        this.sensors.recordBytesSent(channel.id(), send.size());
                    }
                }



KafkaChannel的重要方法：
1.
/**
 * 将请求添加到KafkaChannel中并添加SelectionKey的SelectionKey.OP_WRITE状态
 */
public void setSend(Send send)
	this.send = send;
    this.transportLayer.addInterestOps(SelectionKey.OP_WRITE);

2.
/**
 * 触发发送数据请求的方法
 */
private boolean send(Send send) throws IOException
	send.writeTo(transportLayer);
    if (send.completed())
        transportLayer.removeInterestOps(SelectionKey.OP_WRITE);



ByteBufferSend的重要方法：
1.
/**
 * 发送数据请求的方法
 */
public long writeTo(GatheringByteChannel channel) throws IOException
	long written = channel.write(buffers);
